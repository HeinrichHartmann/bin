#!/usr/bin/env python
import subprocess
from ftplib import FTP
import json
import sh
import sys, os
import time
import re
from os.path import expanduser

argc = len(sys.argv)
if argc == 1:
    PREVIEW = True
    PROMPT = True
elif argc == 2:
    PREVIEW = False
    PROMPT = False
    FILENAME = argv[1]
else:
    print "Usage:", sys.argv[0], "[filename]"


ftp = 0

def connect():
    with open(expanduser("~/.scan_conf")) as fh:
        conf = json.load(fh)

    global ftp
    ftp = FTP(
        'server02.storage.hosteurope.de',
        conf['user'],
        conf['password']
    )

def ftp_get_file_list():
    return sorted(filter(
        lambda p: p.endswith("pdf"),
        ftp.nlst()
    ))


def ftp_store(file_name):
    tfn = "/tmp/" + file_name
    with open("/tmp/" + file_name, "w") as tfh:
        print "Downloading ", file_name
        ftp.retrbinary('RETR ' + file_name, tfh.write)
    return tfn

def ftp_rm(file_name):
    ftp.delete(file_name)
    print "Removed file ", file_name

def archive_dest(name, scan_id):
    return expanduser("~/Documents/") + \
           time.strftime("%Y-%m-%d_") + \
           name + "_" + scan_id  + ".pdf"

def archive(src, name, scan_id):
    dest = archive_dest(name, scan_id)
    os.rename(src, dest)
    print "> wrote file://" + dest

p = 0
def pdf_open(path):
    global p
    p = subprocess.Popen(["evince", path])
    # returncode = p.wait()

def preview(temp_file):
    print "Opening pdf file://" + temp_file
    pdf_open(temp_file)

def extract_scan_id(file_name):
    x = re.match("scan_0*(\d+).pdf", file_name)
    if (x == None):
        print "Warning: No ScanID found in ", file_name
        return ""
    return "S" + x.groups()[0]

pdftk=sh.Command("pdftk")
def main():
    connect()

    stash_buffer = []
    for file_name in ftp_get_file_list():
        scan_id = extract_scan_id(file_name)
        temp_file = ftp_store(file_name)

        preview(temp_file)

        action = raw_input("Action archive&delete, delete, stash, collate")

        if action == 'a':
            arc_name = raw_input("Name: ")
            archive(temp_file, arc_name, scan_id)
            ftp_rm(file_name)
        elif action == 'd':
            ftp_rm(file_name)
        elif action == 's':
            stash_buffer.append(temp_file)
            ftp_rm(file_name)
        elif action == 'c':
            # pdftk A=even.pdf B=odd.pdf shuffle A Bend-1 output collated.pdf
            stash_file = stash_buffer.pop()
            name = raw_input("Name: ")
            dest = archive_dest(name, scan_id)
            pdftk("A=" + temp_file, "B=" + stash_file, "shuffle", "A", "Bend-1", "output", dest)
            ftp_rm(file_name)

if __name__ == "__main__":
    main()

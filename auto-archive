#!/usr/bin/python
import sys, os
import logging
import time
import shutil
import tarfile
from gi.repository import Notify

## Logging #####################################################################
logfile = os.path.expanduser("~/log/auto-archive.log")
logging.basicConfig(
    filename=logfile,
    level=logging.DEBUG,
    format='%(asctime)s %(message)s'
)

## Notifications ################################################################
os.environ["DISPLAY"] = ":1" # needed when run from background
def notify(message):
    Notify.init("Auto Archive")
    Notify.Notification.new("Auto Archive", message).show()

## Logic ########################################################################
def archive(archive_dir, file_path_abs):
    if not (os.path.isdir(archive_dir) and os.access(archive_dir, os.W_OK | os.X_OK)):
        raise Exception("Archive directory not found or not writable: " + archive_dir)
    if not os.path.exists(file_path_abs): raise Exception(file_path_abs)
    basename = os.path.basename(file_path_abs)
    if os.path.isfile(file_path_abs):
        new_basename = "{}_{}".format(time.strftime("%Y-%m-%d"), basename)
        new_path = os.path.join(archive_dir, new_basename)
        if os.path.exists(new_path): raise Exception("File exists:" + new_path)
        logging.info("Archiving '%s' to '%s'", file_path_abs, new_path)
        shutil.move(file_path_abs, new_path)
    elif os.path.isdir(file_path_abs):
        new_basename = "{}_{}.tar.gz".format(time.strftime("%Y-%m-%d"), basename)
        new_path = os.path.join(archive_dir, new_basename)
        if os.path.exists(new_path): raise Exception("File exists:" + new_path)
        logging.info("Archiving '%s' to '%s'", file_path_abs, new_path)
        with tarfile.open(new_path, "w:gz") as tar:
            logging.info("Archiving '%s' to '%s'", file_path_abs, new_path)
            tar.add(file_path_abs, arcname=basename)
        shutil.rmtree(file_path_abs)
    else:
        raise Exception("unknown file type")
    notify("Archived " + new_basename)

## Argument Parsing ##############################################################
def main(args):
    logging.debug("Received(%s)", ";".join(args))
    archive_dir = args[0]
    file_path = args[1]
    archive(archive_dir, file_path)

if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except Exception as e:
        logging.exception(e)
        notify("Auto Archive failed: " + str(e))
